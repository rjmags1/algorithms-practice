# 1249. Minimum Remove to Make Valid Parentheses

Given a string `s` of `'('` , `')'` and lowercase English characters.

Your task is to remove the minimum number of parentheses ( `'('` or `')'`, in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

- It is the empty string, contains only lowercase characters, or
- It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or
- It can be written as `(A)`, where `A` is a valid string.


##### Example 1:

```
Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
```

##### Example 2:

```
Input: s = "a)b(c)d"
Output: "ab(c)d"
```

##### Example 3:

```
Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
```

##### Constraints:

- <code>1 <= s.length <= 10<sup>5</sup></code>
- `s[i]` is either `'('` , `')'`, or lowercase English letter.

## Solution

```
# Time: O(n)
# Space: O(n)
class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        # LTR -> search for unmatchable )
        # RTL -> search for unmatchable (
        balance = open = close = 0
        removed = [False] * len(s)
        for i, c in enumerate(s):
            if c == '(':
                balance += 1
            elif c == ')':
                balance -= 1
                if balance == -1:
                    balance = 0
                    removed[i] = True

        balance = open = close = 0
        for i in reversed(range(len(s))):
            c = s[i]
            if c == ')':
                balance += 1
            elif c == '(':
                balance -= 1
                if balance == -1:
                    balance = 0
                    removed[i] = True
        
        return "".join(s[i] for i in range(len(s)) if not removed[i])
```

## Notes
- The strategy at play in this solution is common in many parentheses problems. To obtain a valid substring with minimum removals, we need to remove only those parentheses that must be removed. Iterating LTR, any closing parenthesis that did not have a matching opening paren before it must be removed. Similarly, when iterating RTL, any opening paren that did not have a matching closing paren before it must also be removed.